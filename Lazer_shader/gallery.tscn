[gd_scene load_steps=54 format=2]

[ext_resource path="res://lazor_shader.tscn" type="PackedScene" id=1]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform float intensity = 0.5f;
uniform float layers = 5f;
uniform float speed = 4f;

float gradient(vec2 uv){
    return (0.5f - distance(vec2(uv.x, uv.y), vec2(0.5f, 0.5f)));
}

vec4 colorize(float c, float a){
    vec4 pallete;
    // grayscale
    pallete = vec4(c,c,c,a);
    // funky lilac
    pallete.g = float(c >= 1f);
    pallete.b = float(c >= 1f);

    return pallete;
}

void fragment(){
    // noise
    vec4 bg = texture(TEXTURE, UV - TIME / speed);
    
    COLOR.r = gradient(UV);
    // make noise more intense, apply and clamp
    COLOR.r = clamp(COLOR.r * bg.r * intensity * 10f, 0f, 1f);
    // seperate the noise into layers by removing decimal precision
    COLOR.r = floor(COLOR.r * layers) / layers;
    // make the bottom layer transparent
    COLOR.a = float(COLOR.r > 0f);
    // apply a color pallete
    COLOR = colorize(COLOR.r, COLOR.a);
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/intensity = 1.0
shader_param/layers = 5.0
shader_param/speed = 4.0

[sub_resource type="Shader" id=3]
code = "shader_type canvas_item;

uniform float intensity = 0.5f;
uniform float layers = 5f;
uniform float speed = 4f;

float gradient(vec2 uv){
    return (0.5f - distance(vec2(uv.x, uv.y), vec2(0.5f, 0.5f)));
}

vec4 colorize(float c, float a){
    vec4 pallete;
    // grayscale
    pallete = vec4(c,c,c,a);
    // funky lilac
    pallete.g = 0f;
    pallete.b = 0f;

    return pallete;
}

void fragment(){
    // noise
    vec4 bg = texture(TEXTURE, UV - TIME / speed);
    
    COLOR.r = gradient(UV);
    // make noise more intense, apply and clamp
    COLOR.r = clamp(COLOR.r * bg.r * intensity * 10f, 0f, 1f);
    // seperate the noise into layers by removing decimal precision
    COLOR.r = floor(COLOR.r * layers) / layers;
    // make the bottom layer transparent
    COLOR.a = float(COLOR.r > 0f);
    // apply a color pallete
    COLOR = colorize(COLOR.r, COLOR.a);
}"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/intensity = 1.0
shader_param/layers = 5.0
shader_param/speed = 4.0

[sub_resource type="Shader" id=5]
code = "shader_type canvas_item;

uniform float intensity = 0.5f;
uniform float layers = 5f;
uniform float speed = 4f;

float gradient(vec2 uv){
    return (0.5f - distance(vec2(uv.x, uv.y), vec2(0.5f, 0.5f)));
}

vec4 colorize(float c, float a){
    vec4 pallete;
    // grayscale
    pallete = vec4(c,c,c,a);
    // funky lilac
    pallete.r = float(c >= 1f);
    pallete.b = float(c >= 1f);

    return pallete;
}

void fragment(){
    // noise
    vec4 bg = texture(TEXTURE, UV - TIME / speed);
    
    COLOR.r = gradient(UV);
    // make noise more intense, apply and clamp
    COLOR.r = clamp(COLOR.r * bg.r * intensity * 10f, 0f, 1f);
    // seperate the noise into layers by removing decimal precision
    COLOR.r = floor(COLOR.r * layers) / layers;
    // make the bottom layer transparent
    COLOR.a = float(COLOR.r > 0f);
    // apply a color pallete
    COLOR = colorize(COLOR.r, COLOR.a);
}"

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 5 )
shader_param/intensity = 1.0
shader_param/layers = 5.0
shader_param/speed = 4.0

[sub_resource type="Shader" id=7]
code = "shader_type canvas_item;

uniform float intensity = 0.5f;
uniform float layers = 5f;
uniform float speed = 4f;

float gradient(vec2 uv){
    return (0.5f - distance(vec2(uv.x, uv.y), vec2(0.5f, 0.5f)));
}

vec4 colorize(float c, float a){
    vec4 pallete;
    // grayscale
    pallete = vec4(c,c,c,a);
    // funky lilac
    pallete.r = float(c >= 1f);
    pallete.g = float(c >= 1f);

    return pallete;
}

void fragment(){
    // noise
    vec4 bg = texture(TEXTURE, UV - TIME / speed);
    
    COLOR.r = gradient(UV);
    // make noise more intense, apply and clamp
    COLOR.r = clamp(COLOR.r * bg.r * intensity * 10f, 0f, 1f);
    // seperate the noise into layers by removing decimal precision
    COLOR.r = floor(COLOR.r * layers) / layers;
    // make the bottom layer transparent
    COLOR.a = float(COLOR.r > 0f);
    // apply a color pallete
    COLOR = colorize(COLOR.r, COLOR.a);
}"

[sub_resource type="ShaderMaterial" id=8]
shader = SubResource( 7 )
shader_param/intensity = 1.0
shader_param/layers = 5.0
shader_param/speed = 4.0

[sub_resource type="Shader" id=9]
code = "shader_type canvas_item;

uniform float intensity = 0.5f;
uniform float layers = 5f;
uniform float speed = 4f;

float gradient(vec2 uv){
    return (0.5f - distance(vec2(uv.x, uv.y), vec2(0.5f, 0.5f)));
}

vec4 colorize(float c, float a){
    vec4 pallete;
    // grayscale
    pallete = vec4(c,c,c,a);
    // funky lilac
    pallete.r = 1f - c;
    pallete.b = c;

    return pallete;
}

void fragment(){
    // noise
    vec4 bg = texture(TEXTURE, UV - TIME / speed);
    
    COLOR.r = gradient(UV);
    // make noise more intense, apply and clamp
    COLOR.r = clamp(COLOR.r * bg.r * intensity * 10f, 0f, 1f);
    // seperate the noise into layers by removing decimal precision
    COLOR.r = floor(COLOR.r * layers) / layers;
    // make the bottom layer transparent
    COLOR.a = float(COLOR.r > 0f);
    // apply a color pallete
    COLOR = colorize(COLOR.r, COLOR.a);
}"

[sub_resource type="ShaderMaterial" id=10]
shader = SubResource( 9 )
shader_param/intensity = 1.0
shader_param/layers = 5.0
shader_param/speed = 4.0

[sub_resource type="Shader" id=11]
code = "shader_type canvas_item;

uniform float intensity = 0.5f;
uniform float layers = 5f;
uniform float speed = 4f;

float gradient(vec2 uv){
    return (0.5f - distance(vec2(uv.x, uv.y), vec2(0.5f, 0.5f)));
}

vec4 colorize(float c, float a){
    vec4 pallete;
    // grayscale
    pallete = vec4(c,c,c,a);
    pallete.b = 1f - c;
	pallete.g = 1f - c;

    return pallete;
}

void fragment(){
    // noise
    vec4 bg = texture(TEXTURE, UV - TIME / speed);
    
    COLOR.r = gradient(UV);
    // make noise more intense, apply and clamp
    COLOR.r = clamp(COLOR.r * bg.r * intensity * 10f, 0f, 1f);
    // seperate the noise into layers by removing decimal precision
    COLOR.r = floor(COLOR.r * layers) / layers;
    // make the bottom layer transparent
    COLOR.a = float(COLOR.r > 0f);
    // apply a color pallete
    COLOR = colorize(COLOR.r, COLOR.a);
}"

[sub_resource type="ShaderMaterial" id=12]
shader = SubResource( 11 )
shader_param/intensity = 1.0
shader_param/layers = 5.0
shader_param/speed = 4.0

[sub_resource type="Shader" id=13]
code = "shader_type canvas_item;

uniform float intensity = 0.5f;
uniform float layers = 5f;
uniform float speed = 4f;

float gradient(vec2 uv){
    return (0.5f - distance(vec2(uv.x, uv.y), vec2(0.5f, 0.5f)));
}

vec4 colorize(float c, float a){
    vec4 pallete;
    // grayscale
    pallete = vec4(c,c,c,a);
    // funky lilac
    pallete.r = float(c >= 1f);
    pallete.b = c;

    return pallete;
}

void fragment(){
    // noise
    vec4 bg = texture(TEXTURE, UV - TIME / speed);
    
    COLOR.r = gradient(UV);
    // make noise more intense, apply and clamp
    COLOR.r = clamp(COLOR.r * bg.r * intensity * 10f, 0f, 1f);
    // seperate the noise into layers by removing decimal precision
    COLOR.r = floor(COLOR.r * layers) / layers;
    // make the bottom layer transparent
    COLOR.a = float(COLOR.r > 0f);
    // apply a color pallete
    COLOR = colorize(COLOR.r, COLOR.a);
}"

[sub_resource type="ShaderMaterial" id=14]
shader = SubResource( 13 )
shader_param/intensity = 1.0
shader_param/layers = 5.0
shader_param/speed = 4.0

[sub_resource type="Shader" id=15]
code = "shader_type canvas_item;

uniform float intensity = 0.5f;
uniform float layers = 5f;
uniform float speed = 4f;

float gradient(vec2 uv){
    return (1f - distance(vec2(0, uv.y), vec2(0f, 1f)));
}

vec4 colorize(float c, float a){
    vec4 pallete;
    // grayscale
    pallete = vec4(c,c,c,a);
    // funky lilac
    pallete.r = float(c >= 1f);
    pallete.b = c;

    return pallete;
}

void fragment(){
    // noise
    vec4 bg = texture(TEXTURE, UV - TIME / speed);
    
    COLOR.r = gradient(UV);
    // make noise more intense, apply and clamp
    COLOR.r = clamp(COLOR.r * bg.r * intensity * 10f, 0f, 1f);
    // seperate the noise into layers by removing decimal precision
    COLOR.r = floor(COLOR.r * layers) / layers;
    // make the bottom layer transparent
    COLOR.a = float(COLOR.r > 0f);
    // apply a color pallete
    COLOR = colorize(COLOR.r, COLOR.a);
}"

[sub_resource type="ShaderMaterial" id=16]
shader = SubResource( 15 )
shader_param/intensity = 1.0
shader_param/layers = 5.0
shader_param/speed = 4.0

[sub_resource type="Shader" id=17]
code = "shader_type canvas_item;

uniform float intensity = 0.5f;
uniform float layers = 5f;
uniform float speed = 4f;

float gradient(vec2 uv){
    return (0.5f - distance(vec2(0, uv.y), vec2(0f, 0.5f)));
}

vec4 colorize(float c, float a){
    vec4 pallete;
    // grayscale
    pallete = vec4(c,c,c,a);
    // funky lilac
    pallete.r = float(c >= 1f);
    pallete.b = c;

    return pallete;
}

void fragment(){
    // noise
    vec4 bg = texture(TEXTURE, UV - TIME / speed);
    
    COLOR.r = gradient(UV);
    // make noise more intense, apply and clamp
    COLOR.r = clamp(COLOR.r * bg.r * intensity * 10f, 0f, 1f);
    // seperate the noise into layers by removing decimal precision
    COLOR.r = floor(COLOR.r * layers) / layers;
    // make the bottom layer transparent
    COLOR.a = float(COLOR.r > 0f);
    // apply a color pallete
    COLOR = colorize(COLOR.r, COLOR.a);
}"

[sub_resource type="ShaderMaterial" id=18]
shader = SubResource( 17 )
shader_param/intensity = 1.0
shader_param/layers = 5.0
shader_param/speed = 4.0

[sub_resource type="OpenSimplexNoise" id=19]
period = 256.0
persistence = 0.0

[sub_resource type="NoiseTexture" id=20]
seamless = true
noise = SubResource( 19 )

[sub_resource type="OpenSimplexNoise" id=21]
lacunarity = 0.1

[sub_resource type="NoiseTexture" id=22]
seamless = true
noise = SubResource( 21 )

[sub_resource type="Shader" id=23]
code = "shader_type canvas_item;

uniform float intensity = 0.5f;
uniform float layers = 5f;
uniform float speed = 4f;

float gradient(vec2 uv){
    return (1f - distance(vec2(0, uv.y), vec2(0f, 1f)));
}

vec4 colorize(float c, float a){
    vec4 pallete;
    // grayscale
    pallete = vec4(c,c,c,a);
    // funky lilac
    pallete.r = float(c >= 1f);
    pallete.b = c;

    return pallete;
}

void fragment(){
    // noise
    vec4 bg = texture(TEXTURE, UV - TIME / speed);
    
    COLOR.r = gradient(UV);
    // make noise more intense, apply and clamp
    COLOR.r = clamp(COLOR.r * bg.r * intensity * 10f, 0f, 1f);
    // seperate the noise into layers by removing decimal precision
    COLOR.r = floor(COLOR.r * layers) / layers;
    // make the bottom layer transparent
    COLOR.a = float(COLOR.r > 0f);
    // apply a color pallete
    COLOR = colorize(COLOR.r, COLOR.a);
}"

[sub_resource type="ShaderMaterial" id=24]
shader = SubResource( 23 )
shader_param/intensity = 0.35
shader_param/layers = 10.0
shader_param/speed = 4.0

[sub_resource type="OpenSimplexNoise" id=25]
octaves = 1

[sub_resource type="NoiseTexture" id=26]
seamless = true
noise = SubResource( 25 )

[sub_resource type="Shader" id=27]
code = "shader_type canvas_item;

uniform float intensity = 0.5f;
uniform float layers = 5f;
uniform float speed = 4f;

float gradient(vec2 uv){
    return (0.5f - distance(vec2(0, uv.y), vec2(0f, 0.5f)));
}

vec4 colorize(float c, float a){
    vec4 pallete;
    // grayscale
    pallete = vec4(c,c,c,a);
    // funky lilac
    pallete.r = float(c >= 1f);
    pallete.b = c;

    return pallete;
}

void fragment(){
    // noise
    vec4 bg = texture(TEXTURE, UV - TIME / speed);
    
    COLOR.r = gradient(UV);
    // make noise more intense, apply and clamp
    COLOR.r = clamp(COLOR.r * bg.r * intensity * 10f, 0f, 1f);
    // seperate the noise into layers by removing decimal precision
    COLOR.r = floor(COLOR.r * layers) / layers;
    // make the bottom layer transparent
    COLOR.a = float(COLOR.r > 0f);
    // apply a color pallete
    COLOR = colorize(COLOR.r, COLOR.a);
}"

[sub_resource type="ShaderMaterial" id=28]
shader = SubResource( 27 )
shader_param/intensity = 1.0
shader_param/layers = 8.0
shader_param/speed = 2.0

[sub_resource type="OpenSimplexNoise" id=29]
persistence = 1.0
lacunarity = 0.1

[sub_resource type="NoiseTexture" id=30]
seamless = true
noise = SubResource( 29 )

[sub_resource type="Shader" id=31]
code = "shader_type canvas_item;

uniform float intensity = 0.5f;
uniform float layers = 5f;
uniform float speed = 4f;

float gradient(vec2 uv){
    return (0.5f - distance(vec2(0, uv.y), vec2(0f, 0.5f)));
}

vec4 colorize(float c, float a){
    vec4 pallete;
    // grayscale
    pallete = vec4(c,c,c,a);
    // funky lilac
    pallete.r = float(c >= 1f);
    pallete.b = c;

    return pallete;
}

void fragment(){
    // noise
    vec4 bg = texture(TEXTURE, UV - TIME / speed);
    
    COLOR.r = gradient(UV);
    // make noise more intense, apply and clamp
    COLOR.r = clamp(COLOR.r * bg.r * intensity * 10f, 0f, 1f);
    // seperate the noise into layers by removing decimal precision
    COLOR.r = floor(COLOR.r * layers) / layers;
    // make the bottom layer transparent
    COLOR.a = float(COLOR.r > 0f);
    // apply a color pallete
    COLOR = colorize(COLOR.r, COLOR.a);
}"

[sub_resource type="ShaderMaterial" id=32]
shader = SubResource( 31 )
shader_param/intensity = 0.4
shader_param/layers = 5.0
shader_param/speed = 1.0

[sub_resource type="Shader" id=33]
code = "shader_type canvas_item;

uniform float intensity = 0.5f;
uniform float layers = 5f;
uniform float speed = 4f;

float gradient(vec2 uv){
    return (1f - distance(vec2(0, uv.y), vec2(0f, 1f)));
}

vec4 colorize(float c, float a){
    vec4 pallete;
    // grayscale
    pallete = vec4(c,c,c,a);
    // funky lilac
    pallete.r = float(c >= 1f);
    pallete.b = c;

    return pallete;
}

void fragment(){
    // noise
    vec4 bg = texture(TEXTURE, UV - TIME / speed);
    
    COLOR.r = gradient(UV);
    // make noise more intense, apply and clamp
    COLOR.r = clamp(COLOR.r * bg.r * intensity * 10f, 0f, 1f);
    // seperate the noise into layers by removing decimal precision
    COLOR.r = floor(COLOR.r * layers) / layers;
    // make the bottom layer transparent
    COLOR.a = float(COLOR.r > 0f);
    // apply a color pallete
    COLOR = colorize(COLOR.r, COLOR.a);
}"

[sub_resource type="ShaderMaterial" id=34]
shader = SubResource( 33 )
shader_param/intensity = 0.1
shader_param/layers = 10.0
shader_param/speed = 4.0

[sub_resource type="OpenSimplexNoise" id=35]
octaves = 9
period = 0.1
lacunarity = 0.1

[sub_resource type="NoiseTexture" id=36]
seamless = true
noise = SubResource( 35 )

[sub_resource type="Shader" id=37]
code = "shader_type canvas_item;

uniform float intensity = 0.5f;
uniform float layers = 5f;
uniform float speed = 4f;

float gradient(vec2 uv){
	// gradient top to bottom, focus in middle
//	return (0.5f - distance(vec2(0f, uv.y), vec2(0f, 0.5f)));
	
	// gradient top
//	return (1f - distance(vec2(0f, uv.y), vec2(0f, 0f)));
	// gradient bottom
//	return (1f - distance(vec2(0f, uv.y), vec2(0f, 1f)));
	//gradient circle
	return (0.5f - distance(vec2(uv.x, uv.y), vec2(0.5f, 0.5f)));
}

vec4 colorize(float c, float a){
	vec4 pallete;
	pallete = vec4(c,c,c,a);
	//experiment x
	pallete.g = (float(c > 0.3 && c < 0.5 || c > 0.9));

	return pallete;
}

void fragment(){
	// noise
	vec4 bg = texture(TEXTURE, UV - TIME / speed);
	
	COLOR.r = gradient(UV);
	// make noise more intense, apply and clamp
	COLOR.r = clamp(COLOR.r * bg.r * intensity * 10f, 0f, 1f);
	// seperate the noise into layers by removing decimal precision
	COLOR.r = floor(COLOR.r * layers) / layers;
	// make the bottom layer transparent
	COLOR.a = float(COLOR.r > 0f);
	// apply a color pallete
	COLOR = colorize(COLOR.r, COLOR.a);
}

"

[sub_resource type="ShaderMaterial" id=38]
shader = SubResource( 37 )
shader_param/intensity = 1.0
shader_param/layers = 5.0
shader_param/speed = 3.0

[sub_resource type="Shader" id=39]
code = "shader_type canvas_item;

uniform float intensity = 0.5f;
uniform float layers = 5f;
uniform float speed = 4f;

float gradient(vec2 uv){
	//gradient circle
	return (0.5f - distance(vec2(uv.x, uv.y), vec2(0.5f, 0.5f)));
}

vec4 colorize(float c, float a){
	vec4 pallete;
	pallete = vec4(c,c,c,a);
	// funky lilac
	pallete.g = float(c >= 1f);
	pallete.b = c;

	return pallete;
}

void fragment(){
	// noise
	vec4 bg = texture(TEXTURE, UV - TIME / speed);
	
	COLOR.r = gradient(UV);
	// make noise more intense, apply and clamp
	COLOR.r = clamp(COLOR.r * bg.r * intensity * 10f, 0f, 1f);
	// seperate the noise into layers by removing decimal precision
	COLOR.r = floor(COLOR.r * layers) / layers;
	// make the bottom layer transparent
	COLOR.a = float(COLOR.r > 0f);
	// apply a color pallete
	COLOR = colorize(COLOR.r, COLOR.a);
}

"

[sub_resource type="ShaderMaterial" id=40]
shader = SubResource( 39 )
shader_param/intensity = 1.0
shader_param/layers = 5.0
shader_param/speed = 3.0

[sub_resource type="Shader" id=41]
code = "shader_type canvas_item;

uniform float intensity = 0.5f;
uniform float layers = 5f;
uniform float speed = 4f;

float gradient(vec2 uv){
	//gradient circle
	return (0.5f - distance(vec2(uv.x, uv.y), vec2(0.5f, 0.5f)));
}

vec4 colorize(float c, float a){
	vec4 pallete;
	pallete = vec4(c,c,c,a);
	// funky lilac
	pallete.b = float(c >= 1f);
//	pallete.b = c;

	return pallete;
}

void fragment(){
	// noise
	vec4 bg = texture(TEXTURE, UV - TIME / speed);
	
	COLOR.r = gradient(UV);
	// make noise more intense, apply and clamp
	COLOR.r = clamp(COLOR.r * bg.r * intensity * 10f, 0f, 1f);
	// seperate the noise into layers by removing decimal precision
	COLOR.r = floor(COLOR.r * layers) / layers;
	// make the bottom layer transparent
	COLOR.a = float(COLOR.r > 0f);
	// apply a color pallete
	COLOR = colorize(COLOR.r, COLOR.a);
}

"

[sub_resource type="ShaderMaterial" id=42]
shader = SubResource( 41 )
shader_param/intensity = 1.0
shader_param/layers = 5.0
shader_param/speed = 3.0

[sub_resource type="Shader" id=43]
code = "shader_type canvas_item;

uniform float intensity = 0.5f;
uniform float layers = 5f;
uniform float speed = 4f;

float gradient(vec2 uv){
	//gradient circle
	return (0.5f - distance(vec2(uv.x, uv.y), vec2(0.5f, 0.5f)));
}

vec4 colorize(float c, float a){
	vec4 pallete;
	pallete = vec4(c,c,c,a);
	// funky lilac
	pallete.b = float(c >= 1f);
	pallete.g = max(float(c >= 1f), c/2f);
//	pallete.b = c;

	return pallete;
}

void fragment(){
	// noise
	vec4 bg = texture(TEXTURE, UV - TIME / speed);
	
	COLOR.r = gradient(UV);
	// make noise more intense, apply and clamp
	COLOR.r = clamp(COLOR.r * bg.r * intensity * 10f, 0f, 1f);
	// seperate the noise into layers by removing decimal precision
	COLOR.r = floor(COLOR.r * layers) / layers;
	// make the bottom layer transparent
	COLOR.a = float(COLOR.r > 0f);
	// apply a color pallete
	COLOR = colorize(COLOR.r, COLOR.a);
}

"

[sub_resource type="ShaderMaterial" id=44]
shader = SubResource( 43 )
shader_param/intensity = 1.0
shader_param/layers = 5.0
shader_param/speed = 3.0

[sub_resource type="Shader" id=45]
code = "shader_type canvas_item;

uniform float intensity = 0.5f;
uniform float layers = 5f;
uniform float speed = 4f;

float gradient(vec2 uv){
	//gradient circle
	return (0.5f - distance(vec2(uv.x, uv.y), vec2(0.5f, 0.5f)));
}

vec4 colorize(float c, float a){
	vec4 pallete;
	pallete = vec4(c,c,c,a);
	// funky lilac
//	pallete.r = float(c >= 1f);
	pallete.b = max(float(c >= 1f), c/3f);
	pallete.g = max(float(c >= 1f), c/3f);
	pallete.r = max(float(c >= 1f), c/3f);
//	pallete.b = c;

	return pallete;
}

void fragment(){
	// noise
	vec4 bg = texture(TEXTURE, UV - TIME / speed);
	
	COLOR.r = gradient(UV);
	// make noise more intense, apply and clamp
	COLOR.r = clamp(COLOR.r * bg.r * intensity * 10f, 0f, 1f);
	// seperate the noise into layers by removing decimal precision
	COLOR.r = floor(COLOR.r * layers) / layers;
	// make the bottom layer transparent
	COLOR.a = float(COLOR.r > 0f);
	// apply a color pallete
	COLOR = colorize(COLOR.r, COLOR.a);
}

"

[sub_resource type="ShaderMaterial" id=46]
shader = SubResource( 45 )
shader_param/intensity = 1.0
shader_param/layers = 5.0
shader_param/speed = 3.0

[sub_resource type="Shader" id=47]
code = "shader_type canvas_item;

uniform float intensity = 0.5f;
uniform float layers = 5f;
uniform float speed = 4f;

float gradient(vec2 uv){
	// gradient top to bottom, focus in middle
	//gradient circle
	return (0.5f - distance(vec2(uv.x, uv.y), vec2(0.5f, 0.5f)));
}

vec4 colorize(float c, float a){
	vec4 pallete;
	// grayscale
	pallete = vec4(c,c,c,a);
	// hot red/ yellow
	pallete.g = float(c >= 1f);
	pallete.b = float(c <= 0f);

	return pallete;
}

void fragment(){
	// noise
	vec4 bg = texture(TEXTURE, UV - TIME / speed);
	
	COLOR.r = gradient(UV);
	// make noise more intense, apply and clamp
	COLOR.r = clamp(COLOR.r * bg.r * intensity * 10f, 0f, 1f);
	// seperate the noise into layers by removing decimal precision
	COLOR.r = floor(COLOR.r * layers) / layers;
	// make the bottom layer transparent
	COLOR.a = float(COLOR.r > 0f);
	// apply a color pallete
	COLOR = colorize(COLOR.r, COLOR.a);
}

"

[sub_resource type="ShaderMaterial" id=48]
shader = SubResource( 47 )
shader_param/intensity = 1.0
shader_param/layers = 5.0
shader_param/speed = 3.0

[sub_resource type="Shader" id=49]
code = "shader_type canvas_item;

uniform float intensity = 0.5f;
uniform float layers = 5f;
uniform float speed = 4f;

float gradient(vec2 uv){
	//gradient circle
	return (0.5f - distance(vec2(uv.x, uv.y), vec2(0.5f, 0.5f)));
}

vec4 colorize(float c, float a){
	vec4 pallete;
	// grayscale
	pallete = vec4(c,c,c,a);

	return pallete;
}

void fragment(){
	// noise
	vec4 bg = texture(TEXTURE, UV - TIME / speed);
	
	COLOR.r = gradient(UV);
	// make noise more intense, apply and clamp
	COLOR.r = clamp(COLOR.r * bg.r * intensity * 10f, 0f, 1f);
	// seperate the noise into layers by removing decimal precision
	COLOR.r = floor(COLOR.r * layers) / layers;
	// make the bottom layer transparent
	COLOR.a = float(COLOR.r > 0f);
	// apply a color pallete
	COLOR = colorize(COLOR.r, COLOR.a);
}

"

[sub_resource type="ShaderMaterial" id=50]
resource_local_to_scene = true
shader = SubResource( 49 )
shader_param/intensity = 1.0
shader_param/layers = 5.0
shader_param/speed = 3.0

[sub_resource type="Shader" id=51]
code = "shader_type canvas_item;

uniform float intensity = 0.5f;
uniform float layers = 5f;
uniform float speed = 4f;

float gradient(vec2 uv){
	//gradient circle
	return (0.5f - distance(vec2(uv.x, uv.y), vec2(0.5f, 0.5f)));
}

vec4 colorize(float c, float a){
	vec4 pallete;
	//inverse grayscale
	pallete = vec4(1f-c,1f-c,1f-c,a);

	return pallete;
}

void fragment(){
	// noise
	vec4 bg = texture(TEXTURE, UV - TIME / speed);
	
	COLOR.r = gradient(UV);
	// make noise more intense, apply and clamp
	COLOR.r = clamp(COLOR.r * bg.r * intensity * 10f, 0f, 1f);
	// seperate the noise into layers by removing decimal precision
	COLOR.r = floor(COLOR.r * layers) / layers;
	// make the bottom layer transparent
	COLOR.a = float(COLOR.r > 0f);
	// apply a color pallete
	COLOR = colorize(COLOR.r, COLOR.a);
}

"

[sub_resource type="ShaderMaterial" id=52]
resource_local_to_scene = true
shader = SubResource( 51 )
shader_param/intensity = 1.0
shader_param/layers = 5.0
shader_param/speed = 3.0

[node name="gallery" type="Node2D"]

[node name="lazor_rainbow" parent="." instance=ExtResource( 1 )]
position = Vector2( -606.886, 498.106 )

[node name="lazor_red" parent="." instance=ExtResource( 1 )]
material = SubResource( 2 )
position = Vector2( -659.518, 1672.84 )

[node name="lazor_red2" parent="." instance=ExtResource( 1 )]
material = SubResource( 4 )
position = Vector2( 9.92334, 1078.36 )

[node name="lazor_green" parent="." instance=ExtResource( 1 )]
material = SubResource( 6 )
position = Vector2( -21.6223, 1666.53 )

[node name="lazor_green2" parent="." instance=ExtResource( 1 )]
material = SubResource( 8 )
position = Vector2( 657.133, 1655.07 )

[node name="lazor_funk" parent="." instance=ExtResource( 1 )]
material = SubResource( 10 )
position = Vector2( 1350.34, 1146.3 )

[node name="lazor_funk2" parent="." instance=ExtResource( 1 )]
material = SubResource( 12 )
position = Vector2( 1350.63, 483.61 )

[node name="lazor_teal" parent="." instance=ExtResource( 1 )]
material = SubResource( 14 )
position = Vector2( -663.152, 2248.81 )

[node name="lazor_tealsurface" parent="." instance=ExtResource( 1 )]
material = SubResource( 16 )
position = Vector2( -1225.26, 480.388 )

[node name="lazor_tealsurface2" parent="." instance=ExtResource( 1 )]
material = SubResource( 18 )
position = Vector2( -1255.97, 1688.24 )

[node name="lazor_tealsurface4" parent="." instance=ExtResource( 1 )]
material = SubResource( 18 )
position = Vector2( -1258.3, 2253.63 )
texture = SubResource( 20 )

[node name="lazor_tealsurface3" parent="." instance=ExtResource( 1 )]
material = SubResource( 16 )
position = Vector2( -1253.48, 1082.76 )
texture = SubResource( 22 )

[node name="lazor_tealsurface8" parent="." instance=ExtResource( 1 )]
material = SubResource( 24 )
position = Vector2( -1890.71, 485.031 )
texture = SubResource( 26 )

[node name="lazor_tealsurface7" parent="." instance=ExtResource( 1 )]
material = SubResource( 28 )
position = Vector2( -1921.42, 1692.88 )
texture = SubResource( 30 )

[node name="lazor_tealsurface6" parent="." instance=ExtResource( 1 )]
material = SubResource( 32 )
position = Vector2( -1923.75, 2258.27 )
texture = SubResource( 20 )

[node name="lazor_tealsurface5" parent="." instance=ExtResource( 1 )]
material = SubResource( 34 )
position = Vector2( -1918.93, 1087.41 )
texture = SubResource( 36 )

[node name="lazor_x" parent="." instance=ExtResource( 1 )]
material = SubResource( 38 )
position = Vector2( 669.853, 1089.27 )

[node name="lazor_lilac" parent="." instance=ExtResource( 1 )]
material = SubResource( 40 )
position = Vector2( 50.3224, 2253.77 )

[node name="lazor_yellow" parent="." instance=ExtResource( 1 )]
material = SubResource( 42 )
position = Vector2( 661.736, 2248.86 )

[node name="lazor_orange2" parent="." instance=ExtResource( 1 )]
material = SubResource( 44 )
position = Vector2( 1328.57, 2237.87 )

[node name="lazor_darker" parent="." instance=ExtResource( 1 )]
material = SubResource( 46 )
position = Vector2( 1347.96, 1697.25 )

[node name="lazor_red_yellow" parent="." instance=ExtResource( 1 )]
material = SubResource( 48 )
position = Vector2( -610.686, 1104.21 )

[node name="lazor_plain" parent="." instance=ExtResource( 1 )]
material = SubResource( 50 )
position = Vector2( 8.00354, 479.061 )

[node name="lazor_inverse" parent="." instance=ExtResource( 1 )]
material = SubResource( 52 )
position = Vector2( 642.604, 469.561 )

[node name="Camera2D" type="Camera2D" parent="."]
position = Vector2( -51.551, 1354.65 )
current = true
zoom = Vector2( 1.2, 1.2 )

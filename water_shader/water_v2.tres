[gd_resource type="ShaderMaterial" load_steps=4 format=2]

[sub_resource type="Shader" id=3]
code = "shader_type canvas_item;

//uniform int cameraOrthSize = 1;
uniform float offset = 0; // this is controlled by script, it takes into account camera position and water object position, that way reflection stays in the same place when camera is moving
uniform float aspect = 1; // is controlled by script, ensures that noise is not affected by object scale
uniform sampler2D noiseTexture;
uniform float offsetStrength;
uniform float maxOffset;

uniform vec2 distortionScale = vec2(0.3, 0.3);
uniform vec2 distortionSpeed = vec2(0.01, 0.02);

void fragment()
{
	
	vec2 uv = SCREEN_UV; 
	uv.y = 1. - uv.y - offset; // turning screen uvs upside down
	
	vec2 noiseTextureUV = UV * distortionScale; 
	noiseTextureUV.y *= aspect;
	noiseTextureUV += TIME * distortionSpeed; // scroll noise over time
	
	vec2 noiseOffset = texture(noiseTexture, noiseTextureUV).rg * offsetStrength;
	
	// remapping the noise
	//original formula --- output = (input - minInput) / (maxInput - minInput) * (maxOutput - minOutput) + minOutput
	// using 0 as minInput and 100 as maxInput
	noiseOffset.x = noiseOffset.x / 100. * maxOffset;
	
	// secondary noise to simulate smaller ripples, values are set to be too much to show off the effect
	/*vec2 noiseTextureUV2 = UV * distortionScale * 10.; 
	noiseTextureUV2.y *= aspect;
	noiseTextureUV2 += TIME * distortionSpeed * .5;
	
	vec2 noiseOffset2 = texture(noiseTexture, noiseTextureUV2).rg * offsetStrength;
	noiseOffset2.x = noiseOffset2.x / 100. * maxOffset;
	noiseOffset += noiseOffset2;*/
	
	uv += noiseOffset;
	vec4 color = texture(SCREEN_TEXTURE, uv);
	
	
	
	vec4 t = texture(TEXTURE, UV);
	if(t.r > 0f){
		COLOR = color;
	}else{
		COLOR.a = 0f;
	}
}"

[sub_resource type="OpenSimplexNoise" id=5]

[sub_resource type="NoiseTexture" id=6]
noise = SubResource( 5 )

[resource]
shader = SubResource( 3 )
shader_param/offset = -0.036
shader_param/aspect = 1.0
shader_param/offsetStrength = null
shader_param/maxOffset = null
shader_param/distortionScale = Vector2( 0.3, 0.3 )
shader_param/distortionSpeed = Vector2( 0.01, 0.02 )
shader_param/noiseTexture = SubResource( 6 )
